from falcor import *

def render_graph_DefaultRenderGraph():
    g = RenderGraph('DefaultRenderGraph')
    loadRenderPassLibrary('BSDFViewer.dll')
    loadRenderPassLibrary('AccumulatePass.dll')
    loadRenderPassLibrary('TemporalDelayPass.dll')
    loadRenderPassLibrary('Antialiasing.dll')
    loadRenderPassLibrary('SSAO.dll')
    loadRenderPassLibrary('BlitPass.dll')
    loadRenderPassLibrary('MegakernelPathTracer.dll')
    loadRenderPassLibrary('CSM.dll')
    loadRenderPassLibrary('SkyBox.dll')
    loadRenderPassLibrary('DebugPasses.dll')
    loadRenderPassLibrary('DepthPass.dll')
    loadRenderPassLibrary('ErrorMeasurePass.dll')
    loadRenderPassLibrary('ForwardLightingPass.dll')
    loadRenderPassLibrary('GBuffer.dll')
    loadRenderPassLibrary('ImageLoader.dll')
    loadRenderPassLibrary('Utils.dll')
    loadRenderPassLibrary('MinimalPathTracer.dll')
    loadRenderPassLibrary('PassLibraryTemplate.dll')
    loadRenderPassLibrary('PixelInspectorPass.dll')
    loadRenderPassLibrary('PlecoTemporalPass.dll')
    loadRenderPassLibrary('PlecoBilateralPass.dll')
    loadRenderPassLibrary('PlecoRayTracer.dll')
    loadRenderPassLibrary('PlecoDenoiser.dll')
    loadRenderPassLibrary('SceneDebugger.dll')
    loadRenderPassLibrary('SVGFPass.dll')
    loadRenderPassLibrary('ToneMapper.dll')
    loadRenderPassLibrary('WhittedRayTracer.dll')
    GBufferRT = createPass('GBufferRT', {'samplePattern': SamplePattern.Center, 'sampleCount': 16, 'disableAlphaTest': False, 'adjustShadingNormals': True, 'forceCullMode': False, 'cull': CullMode.CullBack, 'texLOD': LODMode.UseMip0})
    g.addPass(GBufferRT, 'GBufferRT')
    PlecoRayTracer = createPass('PlecoRayTracer')
    g.addPass(PlecoRayTracer, 'PlecoRayTracer')
    SideBySidePass = createPass('SideBySidePass', {'splitLocation': 0.5, 'showTextLabels': False, 'leftLabel': 'Left side', 'rightLabel': 'Right side'})
    g.addPass(SideBySidePass, 'SideBySidePass')
    PlecoBilateralPass = createPass('PlecoBilateralPass')
    g.addPass(PlecoBilateralPass, 'PlecoBilateralPass')
    g.addEdge('GBufferRT.posW', 'PlecoRayTracer.iWorldPosition')
    g.addEdge('GBufferRT.normW', 'PlecoRayTracer.iWorldNormal')
    g.addEdge('GBufferRT.diffuseOpacity', 'PlecoRayTracer.iMaterialDiffuse')
    g.addEdge('GBufferRT.specRough', 'PlecoRayTracer.iMaterialSpecRough')
    g.addEdge('GBufferRT.emissive', 'PlecoRayTracer.iMaterialEmissive')
    g.addEdge('GBufferRT.matlExtra', 'PlecoRayTracer.iMaterialExtraParams')
    g.addEdge('PlecoRayTracer.oColor', 'SideBySidePass.leftInput')
    g.addEdge('PlecoRayTracer.oColor', 'PlecoBilateralPass.Input_From_PlecoRT')
    g.addEdge('PlecoBilateralPass.Output_From_PD', 'SideBySidePass.rightInput')
    g.markOutput('SideBySidePass.output')
    return g

DefaultRenderGraph = render_graph_DefaultRenderGraph()
try: m.addGraph(DefaultRenderGraph)
except NameError: None
